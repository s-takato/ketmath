<! -- 250801
   <link rel="stylesheet" href="ketcindyjs/CindyJS.css">
   <script type="text/javascript" src="ketcindyjs/Cindy.js"></script>
-->

  <script src="ketcindyjs/algebrite.bundle-for-browser.js"></script>
<script type="text/javascript">
  function jsstring_to_cs(jsvar, csvar) {
    var com = csvar + ' = "' + eval(jsvar) +'"';
    // alert("jsstring_to_cs: com="+com);
    cdy.evokeCS(com);
  }
  function js_to_cs(jsvar, csvar) {
    var com = csvar + ' = ' + eval(jsvar);
    // alert("js_to_cs: com="+com);
    cdy.evokeCS(com);
  }
</script>
<script id="csinit" type="text/x-cindyscript">
jstocs(jsvar,csvar):=(
com = "js_to_cs('" + jsvar + "','" + csvar +"')";
// alert("jstcs com="+com);
javascript(com);
);
jsstringtocs(jsvar,csvar):=(
com = "jsstring_to_cs('" + jsvar + "','" + csvar +"')";
javascript(com);
);
cstojs(csvar,jsvar):=(
// print("csvar="+csvar+", jsvar="+jsvar);
// print(jsvar + " = " + parse(csvar));
javascript(jsvar + " = " + parse(csvar));
);
csstringtojs(csvar,jsvar):=(
javascript(jsvar + " = '" + parse(csvar) + "'");
// javascript(jsvar + " = " + csvar);
);
exejs(argmentcom) := (
javascript(argmentcom)
);
execs(argmentcom):=(
parse(argmentcom);
);
exealg(com) := (
regional(exealtmp2);
exejs("exealtmp1=Algebrite.run('"+com+"')");
jsstringtocs("exealtmp1","exealtmp2");
exealtmp2;
);
alert(str) := (
javascript("alert('"+str+"')");
);

<! --
Invert(x):=reverse(x);
Getlevel(str):=Getlevel(str,",");
...
--> 